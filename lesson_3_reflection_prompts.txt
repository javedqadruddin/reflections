git remote command lets you create remotes for your local git repository
	remotes are remote locations that you can push and pull commits to /from
	git remote    by itself will show you what remotes you already have on this repo
	git remote add [name] [url]
		-standard name for first remote is 'origin'
	git remote -v gives you more information the remotes you have inthis repo (verbose)
	git push [remote name] [local branch name] pushes that branch to the remote
		ex. git push origin master sends the master branch to origin

When would you want to use a remote repository rather than keeping all your work local?
  You'd definitely use it when you're collaborating with other people.
  You might also want to use it to store your code in a place where it'll be safe even if something happens to your local computer


  git pull [name of remote] [name of branch on remote] pulls the latest commits from the remote onto your local repo into the currently checked-out branch


  Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?
  	If you auto-pull, it might pull in changes that conflict with your own at  time when you are working on something
  	It's many of the same reasons you wouldn't want to auto commit

  A fork is just a git clone that occurs on github's servers
  	-The fork will have links back to the original so the original author can get credit
  	-also, github keeps track of how many forks come from one repo, so that's kinda cool
  	-Once you fork into your github account, you can clone the repo down to your machine and make changes you want and commit them to your fork

Describe the differences between forks, clones, and branches. When would you use one instead of another?
	-forks occur only on the github servers and take someone else's repository and clone it to your github account
		-changes you make from there on occur on your account and not on the account you originally forked it from
		-fork does preserve info as to where it originated tho so the original person gets credit
	-clones occur on your machine and other machines in any git directory
		-when you clone a repo, you get a copy of it that you can then edit and make commits to
	-branches are pointers to a certain commit that have names that you give them
		-they help keep track of different versions of code that you want to have
		-you make commits in a branch
		-you can merge branches to bring changes made in different branches together
		-you can push a branch (or any commit really) to a github repo

When you make a remote, it actually creates a "hidden" branch in your local repo that points to the latest commit you got from the remote repo
	-it'll be called [name of remote]/[name of branch], so, in simple example origin/master
	git fetch command updates this local copy of the remote branch without merging it with your regular local branch
		-You can then use this to compare and merge into your local if you want to, while repairing conflicts
	git pull basically does all these steps at once--fetches into the local copy of remote branch and then merging with your regular local branch.
		-git pull is the same as git fetch followed by git merge
		git fetch origin
		git merge master origin/master

What is the benefit of having a copy of the last known state of the remote stored locally?
	It's beneficial so you can see the differences beforehand if there's a conflict between your local copy and the remote one
	It's also beneficial if you want to periodically check the state of the remote copy without yet merging the changes into your local one

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
	-I'm really not sure how I'd collaborate without using github... I suppose I'd have to have only 1 person working on any given file at a time
	-Then we'd send each other our changes to those files periodically
	-This would be a pain since in programming you often have files that you'd like to have mulitple people working on at once
	



  
